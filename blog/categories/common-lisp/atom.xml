<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Common Lisp | Small pieces]]></title>
  <link href="http://blog.krrrcks.net/blog/categories/common-lisp/atom.xml" rel="self"/>
  <link href="http://blog.krrrcks.net/"/>
  <updated>2014-10-09T14:29:31+00:00</updated>
  <id>http://blog.krrrcks.net/</id>
  <author>
    <name><![CDATA[Krrrcks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DateTime conversion can be tricky]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/07/24/datetime-conversion-can-be-tricky/"/>
    <updated>2014-07-24T09:41:36+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/07/24/datetime-conversion-can-be-tricky</id>
    <content type="html"><![CDATA[<p>I wrote a small Lisp application and a JavaScript client gets some
data from that application. All time stamps are returned as &ldquo;Lisp&rdquo;
time stamps, i.e. an integer with seconds where zero equals Jan 01
1900.</p>

<p>In the JS client the time stamp is then converted to JS time stamps,
i.e. millisconds where zero equals Jan 01 1970.</p>

<p>When testing the application I noticed that sometimes the displayed
date is one day behind. For example in the data base I have Jan 05
1980 but in JavaScript I get a Jan 04 1980. But some other dates
worked: A time stamp Jan 05 1970 was correctly converted to Jan 05
1970.</p>

<p>I had a look into the JavaScript code and found:</p>

<p><code>
convA = function(ts) {
  tmp = new Date(ts*1000);
  tmp.setFullYear(tmp.getFullYear() - 70);
  return tmp.getTime();
}
</code></p>

<p>It&rsquo;s likely the developer thought: &ldquo;Well, it&rsquo;s millisecond instead of
second. Therefore I multiply by 1,000. But then I am 70 years in the
future and I have to substract 70 years and everything will be ok.&rdquo;</p>

<p>After thinking a while I came to the conclusion: Of course not!</p>

<p>The developer made the assumption that there are as many leap years
between 1900 and 1970 as between <code>ts</code> and <code>ts+70</code>. Obviously that
assumption does not hold for all time stamps. And therefore sometimes
the resulting JavaScript date is one day behind.</p>

<p>So a better solution would be to substract all seconds between 1900
and 1970 from <code>ts</code>, multiply by 1,000 and treat this as a JavaScript
time stamp. Perhaps best would be to do the conversion in the Lisp
process and only deliver a JavaScript-like time stamp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I learned something about symbols and packages]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/07/06/i-learned-something-about-symbols-and-packages/"/>
    <updated>2014-07-06T09:02:39+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/07/06/i-learned-something-about-symbols-and-packages</id>
    <content type="html"><![CDATA[<p>I am using Common Lisp for developing a web application. Several days
ago a new part of this application didn&rsquo;t worked as supposed and I
spent a considerable large amount of time in finding the bug. It was a
very simple problem with symbols where I mixed something up.</p>

<p>In the application the web server somewhen gets some JSON data from
the browser. It is then converted to Lisp object using the <code>CL-JSON</code>
package. This package converts JSON objects to a-lists and converts
the member keys to symbols (see CL-JSON&rsquo;s <a href="http://common-lisp.net/project/cl-json/">documentation</a>. I then wanted to look something up in that a-list and failed.</p>

<p>I wrote a small test case to show the effect and explain what went wrong.</p>

<p>```
(ql:quickload &lsquo;(&ldquo;hunchentoot&rdquo; &ldquo;cl-who&rdquo;))
;; direct loading via ql only for demonstration purposes, normally I
;; would use a asdf:defsystem for that.</p>

<p>(in-package :cl-user)</p>

<p>(defpackage :my-app (:use :cl))</p>

<p>(in-package :my-app)</p>

<p>(defparameter <em>my-a-list</em>
  &lsquo;((foo . 100)</p>

<pre><code>(bar . 200)))   ;; in the real application this a-list is
        ;; generated by a JSON-to-lisp conversion by
        ;; CL-JSON; in CL-JSON the object member keys are
        ;; converted to symbols.
</code></pre>

<p>(defun get-value (key)
  &ldquo;Returns the value with KEY from <em>MY-A-LIST</em>.&rdquo;
  (cdr (assoc (intern (string-upcase key)) <em>my-a-list</em>)))</p>

<p>(hunchentoot:define-easy-handler (web-get-value :uri &ldquo;/get-value&rdquo;) (id)
  (cl-who:with-html-output-to-string (<em>standard-output</em> nil :prologue t)</p>

<pre><code>(:p (cl-who:fmt "Value of ~a is: ~a" id (get-value id)))))
</code></pre>

<p>(defun start ()
  (hunchentoot:start (make-instance &lsquo;hunchentoot:easy-acceptor :port 4242)))
```</p>

<p>So on the REPL everything looks fine:
<code>
MY-APP&gt; (get-value "foo")
100
MY-APP&gt; (get-value "bar")
200
MY-APP&gt;
</code></p>

<p>But when I used my web browser to give me these results as well I got something strange.
For example here are some results when using curl:
```
~> curl <a href="http://localhost:4242/get-value?id=foo">http://localhost:4242/get-value?id=foo</a>
&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>&rdquo;></p>

<p>Value of foo is: NIL</p>


<p>```</p>

<p>I was puzzled: The value is <code>NIL</code>?</p>

<p>After some debugging I found out that the easy handler from
Hunchentoot runs with <code>*package*</code> set to <code>COMMON-LISP-USER</code>
(and not to <code>MY-APP</code> as I implicitly assumed). That means that <code>assoc</code> looked up <code>COMMON-LISP-USER::FOO</code> in the a-list where
the keys are <code>MY-APP::FOO</code> and <code>MY-APP::BAR</code>.
And this test fails. Therefore <code>NIL</code> is returned which is correct.</p>

<p>So I rewrote the <code>get-value</code> function to:
```
(defun get-value (key)
  &ldquo;Returns the value with KEY from <em>MY-A-LIST</em>.&rdquo;
  (cdr (assoc (intern (string-upcase key)</p>

<pre><code>          (find-package :my-app)) *my-a-list*)))
</code></pre>

<p><code>
Now the symbols are interned in the same package and everything went well:
</code>
~> curl <a href="http://localhost:4242/get-value?id=foo">http://localhost:4242/get-value?id=foo</a>
&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>&rdquo;></p>

<p>Value of foo ist: 100</p>


<p>~> curl <a href="http://localhost:4242/get-value?id=bar">http://localhost:4242/get-value?id=bar</a>
&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>&rdquo;></p>

<p>Value of bar ist: 200</p>


<p>```</p>

<p>Therefore I was reminded to think about packages when interning
 symbols. A good guide to symbols and packages could be found in this
 document: <a href="http://www.flownet.com/gat/packages.pdf">The Complete Idiot&rsquo;s Guide to Common Lisp Packages</a>.</p>
]]></content>
  </entry>
  
</feed>
