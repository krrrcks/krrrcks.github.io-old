<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Small pieces]]></title>
  <link href="http://blog.krrrcks.net/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.krrrcks.net/"/>
  <updated>2014-10-09T14:29:31+00:00</updated>
  <id>http://blog.krrrcks.net/</id>
  <author>
    <name><![CDATA[Krrrcks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DateTime conversion can be tricky]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/07/24/datetime-conversion-can-be-tricky/"/>
    <updated>2014-07-24T09:41:36+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/07/24/datetime-conversion-can-be-tricky</id>
    <content type="html"><![CDATA[<p>I wrote a small Lisp application and a JavaScript client gets some
data from that application. All time stamps are returned as &ldquo;Lisp&rdquo;
time stamps, i.e. an integer with seconds where zero equals Jan 01
1900.</p>

<p>In the JS client the time stamp is then converted to JS time stamps,
i.e. millisconds where zero equals Jan 01 1970.</p>

<p>When testing the application I noticed that sometimes the displayed
date is one day behind. For example in the data base I have Jan 05
1980 but in JavaScript I get a Jan 04 1980. But some other dates
worked: A time stamp Jan 05 1970 was correctly converted to Jan 05
1970.</p>

<p>I had a look into the JavaScript code and found:</p>

<p><code>
convA = function(ts) {
  tmp = new Date(ts*1000);
  tmp.setFullYear(tmp.getFullYear() - 70);
  return tmp.getTime();
}
</code></p>

<p>It&rsquo;s likely the developer thought: &ldquo;Well, it&rsquo;s millisecond instead of
second. Therefore I multiply by 1,000. But then I am 70 years in the
future and I have to substract 70 years and everything will be ok.&rdquo;</p>

<p>After thinking a while I came to the conclusion: Of course not!</p>

<p>The developer made the assumption that there are as many leap years
between 1900 and 1970 as between <code>ts</code> and <code>ts+70</code>. Obviously that
assumption does not hold for all time stamps. And therefore sometimes
the resulting JavaScript date is one day behind.</p>

<p>So a better solution would be to substract all seconds between 1900
and 1970 from <code>ts</code>, multiply by 1,000 and treat this as a JavaScript
time stamp. Perhaps best would be to do the conversion in the Lisp
process and only deliver a JavaScript-like time stamp.</p>
]]></content>
  </entry>
  
</feed>
