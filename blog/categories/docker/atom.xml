<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Small pieces]]></title>
  <link href="http://blog.krrrcks.net/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.krrrcks.net/"/>
  <updated>2014-10-09T14:29:31+00:00</updated>
  <id>http://blog.krrrcks.net/</id>
  <author>
    <name><![CDATA[Krrrcks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mind the storage driver for Ubuntu cloud images (on Azure)]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/07/24/mind-the-storage-driver-for-ubuntu-cloud-images-on-azure/"/>
    <updated>2014-07-24T12:30:43+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/07/24/mind-the-storage-driver-for-ubuntu-cloud-images-on-azure</id>
    <content type="html"><![CDATA[<p>A few days ago I wanted to build Firefox OS' newest release for a
friend. Because I did not wanted these GB of code, binaries etc. on my
notebook I fired up an Ubuntu image on Microsoft Azure. I feared that
at a certain point in the build process I may had to download
everything to my local machine and therefore I installed Docker via a
simple</p>

<p><code>
sudo apt-get install docker.io
</code></p>

<p>Then I started the build process as laid out on Mozilla&rsquo;s Developer
Network. But, during downloading the source code (that&rsquo;s about 12 GB
of Git repositories from Mozilla and Android), I got a &ldquo;no more space
left on device&rdquo;. That was strange: I had a 100 GB volume attached to
the VM and enough space and inodes left. After some searching I asked
on the IRC channel and got a good hint: &ldquo;What&rsquo;s your storage driver?&rdquo;</p>

<p>Well, I thought that it&rsquo;s AUFS; I wanted to add &ldquo;as usual&rdquo; because
AUFS was available on my notebook from the beginning. But a <code>docker.io
info</code> gave me:</p>

<p><code>
$ sudo docker.io info
Containers: 0
Images: 0
Storage Driver: devicemapper
 Pool Name: docker-8:1-131188-pool
 Data file: /var/lib/docker/devicemapper/devicemapper/data
 Metadata file: /var/lib/docker/devicemapper/devicemapper/metadata
 Data Space Used: 291.5 Mb
 Data Space Total: 102400.0 Mb
 Metadata Space Used: 0.7 Mb
 Metadata Space Total: 2048.0 Mb
Execution Driver: native-0.1
Kernel Version: 3.13.0-29-generic
WARNING: No swap limit support
</code></p>

<p>I then learned that somehow the DeviceMapper driver only allows a
certain amount of diffs and I reached that amount with my build
process. (Maybe it&rsquo;s possible to relax that restriction but I do not
know how.)</p>

<p>I learned as well that the Ubuntu cloud image that is provided by
Microsoft Azure doesn&rsquo;t have AUFS support. Therefore Docker uses the
DeviceMapper storage driver instead. After I installed the AUFS
support I could export the images, change the storage driver and
import the images again.</p>

<p>It would be nice seeing the Docker documentation being more detailed
on those storage drivers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode support for Octopress]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/06/10/unicode-support-for-octopress/"/>
    <updated>2014-06-10T09:26:22+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/06/10/unicode-support-for-octopress</id>
    <content type="html"><![CDATA[<p>Well, it seems Octopress/Jekyll would like to have a locale set
for UTF-8 support. I followed <a href="http://www.dominik-gaetjens.de/blog/2012/06/09/utf-8-in-octopress/">this (text in German)</a> hint and now my Dockerfile looks
like this:</p>

<p>```</p>

<h1>dockerfile for octopress</h1>

<p>FROM ubuntu:14.04
MAINTAINER krrrcks <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#107;&#114;&#114;&#114;&#x63;&#107;&#x73;&#x40;&#x6b;&#114;&#114;&#x72;&#x63;&#107;&#x73;&#x2e;&#110;&#x65;&#x74;">&#x6b;&#114;&#114;&#114;&#99;&#x6b;&#115;&#64;&#107;&#x72;&#114;&#114;&#99;&#107;&#115;&#46;&#x6e;&#101;&#116;</a>
ENV DEBIAN_FRONTEND noninteractive</p>

<p>RUN apt-get update; \
  apt-get -q -y upgrade
RUN /usr/sbin/locale-gen en_US.UTF-8; \
  update-locale LANG=en_US.UTF-8
RUN apt-get -q -y install git curl; \
  apt-get clean
RUN git clone git://github.com/imathis/octopress.git /opt/octopress
RUN curl -L <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable &mdash;ruby
ENV HOME /root
RUN echo &ldquo;export LC_ALL=en_US.UTF-8&rdquo; >> /root/.bashrc
RUN echo &ldquo;export LANG=en_US.UTF-8&rdquo; >> /root/.bashrc
RUN echo &ldquo;source /usr/local/rvm/scripts/rvm&rdquo; >> /root/.bashrc;
RUN /bin/bash -l -c &ldquo;source /usr/local/rvm/scripts/rvm; \
  rvm install 1.9.3; \
  rvm use 1.9.3; \
  rvm rubygems latest; \
  cd /opt/octopress; \
  gem install bundler; \
  bundle install; \
  rake install&rdquo;
RUN echo &ldquo;rvm use 1.9.3&rdquo; >> /root/.bashrc</p>

<p>WORKDIR /opt/octopress
EXPOSE 4000
CMD [&ldquo;/bin/bash&rdquo;]
```</p>

<p>After playing around with Docker and Octopress I put the whole <code>/opt/octopress</code> folder on my host machine and then
restarted the image with the <code>-v</code> flag. Therefore I can edit the files on my host machine with my favorite editor
and use the container only for producing the HTML files, for preview and for publishing.</p>

<p>The <code>rake preview</code> is a neat feature because the server always looks for changed files and produces the HTML
files on the fly. That means I can edit the files in my editor and could see the resulting pages in a
browser nearly the same time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Dockerfile for setting up Octopress]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/05/26/my-dockerfile-for-setting-up-octopress/"/>
    <updated>2014-05-26T09:24:00+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/05/26/my-dockerfile-for-setting-up-octopress</id>
    <content type="html"><![CDATA[<p>After my trouble with installing all the dependencies for Octopress I
came up with the following Dockerfile for Docker. This follows the
instructions from the Octopress homepage and uses RVM for managing the
ruby dependencies.</p>

<p>```</p>

<h1>dockerfile for octopress</h1>

<p>FROM ubuntu:14.04
MAINTAINER krrrcks <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#107;&#114;&#x72;&#x72;&#99;&#107;&#115;&#64;&#107;&#114;&#x72;&#114;&#99;&#107;&#x73;&#46;&#110;&#x65;&#116;">&#107;&#114;&#114;&#x72;&#99;&#x6b;&#x73;&#64;&#107;&#114;&#x72;&#x72;&#99;&#x6b;&#115;&#46;&#x6e;&#101;&#116;</a>
ENV DEBIAN_FRONTEND noninteractive</p>

<p>RUN apt-get update; \
  apt-get -q -y upgrade
RUN apt-get -q -y install git curl; \
  apt-get clean
RUN git clone git://github.com/imathis/octopress.git /opt/octopress
RUN curl -L <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable &mdash;ruby
ENV HOME /root
RUN echo &ldquo;source /usr/local/rvm/scripts/rvm&rdquo; >> /root/.bashrc;
RUN /bin/bash -l -c &ldquo;source /usr/local/rvm/scripts/rvm; \
  rvm install 1.9.3; \
  rvm use 1.9.3; \
  rvm rubygems latest; \
  cd /opt/octopress; \
  gem install bundler; \
  bundle install; \
  rake install&rdquo;
RUN echo &ldquo;rvm use 1.9.3&rdquo; >> /root/.bashrc</p>

<p>WORKDIR /opt/octopress
EXPOSE 4000
CMD [&ldquo;/bin/bash&rdquo;]
```</p>
]]></content>
  </entry>
  
</feed>
