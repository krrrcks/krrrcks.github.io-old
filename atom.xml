<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Small pieces]]></title>
  <link href="http://blog.krrrcks.net/atom.xml" rel="self"/>
  <link href="http://blog.krrrcks.net/"/>
  <updated>2014-10-09T14:29:31+00:00</updated>
  <id>http://blog.krrrcks.net/</id>
  <author>
    <name><![CDATA[Krrrcks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mind the storage driver for Ubuntu cloud images (on Azure)]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/07/24/mind-the-storage-driver-for-ubuntu-cloud-images-on-azure/"/>
    <updated>2014-07-24T12:30:43+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/07/24/mind-the-storage-driver-for-ubuntu-cloud-images-on-azure</id>
    <content type="html"><![CDATA[<p>A few days ago I wanted to build Firefox OS&#8217; newest release for a
friend. Because I did not wanted these GB of code, binaries etc. on my
notebook I fired up an Ubuntu image on Microsoft Azure. I feared that
at a certain point in the build process I may had to download
everything to my local machine and therefore I installed Docker via a
simple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install docker.io</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Then I started the build process as laid out on Mozilla&rsquo;s Developer
Network. But, during downloading the source code (that&rsquo;s about 12 GB
of Git repositories from Mozilla and Android), I got a &ldquo;no more space
left on device&rdquo;. That was strange: I had a 100 GB volume attached to
the VM and enough space and inodes left. After some searching I asked
on the IRC channel and got a good hint: &ldquo;What&rsquo;s your storage driver?&rdquo;</p>

<p>Well, I thought that it&rsquo;s AUFS; I wanted to add &ldquo;as usual&rdquo; because
AUFS was available on my notebook from the beginning. But a <code>docker.io
info</code> gave me:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker.io info
</span><span class='line'>Containers: 0
</span><span class='line'>Images: 0
</span><span class='line'>Storage Driver: devicemapper
</span><span class='line'> Pool Name: docker-8:1-131188-pool
</span><span class='line'> Data file: /var/lib/docker/devicemapper/devicemapper/data
</span><span class='line'> Metadata file: /var/lib/docker/devicemapper/devicemapper/metadata
</span><span class='line'> Data Space Used: 291.5 Mb
</span><span class='line'> Data Space Total: 102400.0 Mb
</span><span class='line'> Metadata Space Used: 0.7 Mb
</span><span class='line'> Metadata Space Total: 2048.0 Mb
</span><span class='line'>Execution Driver: native-0.1
</span><span class='line'>Kernel Version: 3.13.0-29-generic
</span><span class='line'>WARNING: No swap limit support</span></code></pre></td></tr></table></div></figure>


<p>I then learned that somehow the DeviceMapper driver only allows a
certain amount of diffs and I reached that amount with my build
process. (Maybe it&rsquo;s possible to relax that restriction but I do not
know how.)</p>

<p>I learned as well that the Ubuntu cloud image that is provided by
Microsoft Azure doesn&rsquo;t have AUFS support. Therefore Docker uses the
DeviceMapper storage driver instead. After I installed the AUFS
support I could export the images, change the storage driver and
import the images again.</p>

<p>It would be nice seeing the Docker documentation being more detailed
on those storage drivers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DateTime conversion can be tricky]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/07/24/datetime-conversion-can-be-tricky/"/>
    <updated>2014-07-24T09:41:36+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/07/24/datetime-conversion-can-be-tricky</id>
    <content type="html"><![CDATA[<p>I wrote a small Lisp application and a JavaScript client gets some
data from that application. All time stamps are returned as &ldquo;Lisp&rdquo;
time stamps, i.e. an integer with seconds where zero equals Jan 01
1900.</p>

<p>In the JS client the time stamp is then converted to JS time stamps,
i.e. millisconds where zero equals Jan 01 1970.</p>

<p>When testing the application I noticed that sometimes the displayed
date is one day behind. For example in the data base I have Jan 05
1980 but in JavaScript I get a Jan 04 1980. But some other dates
worked: A time stamp Jan 05 1970 was correctly converted to Jan 05
1970.</p>

<p>I had a look into the JavaScript code and found:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>convA = function(ts) {
</span><span class='line'>  tmp = new Date(ts*1000);
</span><span class='line'>  tmp.setFullYear(tmp.getFullYear() - 70);
</span><span class='line'>  return tmp.getTime();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s likely the developer thought: &ldquo;Well, it&rsquo;s millisecond instead of
second. Therefore I multiply by 1,000. But then I am 70 years in the
future and I have to substract 70 years and everything will be ok.&rdquo;</p>

<p>After thinking a while I came to the conclusion: Of course not!</p>

<p>The developer made the assumption that there are as many leap years
between 1900 and 1970 as between <code>ts</code> and <code>ts+70</code>. Obviously that
assumption does not hold for all time stamps. And therefore sometimes
the resulting JavaScript date is one day behind.</p>

<p>So a better solution would be to substract all seconds between 1900
and 1970 from <code>ts</code>, multiply by 1,000 and treat this as a JavaScript
time stamp. Perhaps best would be to do the conversion in the Lisp
process and only deliver a JavaScript-like time stamp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I learned something about symbols and packages]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/07/06/i-learned-something-about-symbols-and-packages/"/>
    <updated>2014-07-06T09:02:39+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/07/06/i-learned-something-about-symbols-and-packages</id>
    <content type="html"><![CDATA[<p>I am using Common Lisp for developing a web application. Several days
ago a new part of this application didn&rsquo;t worked as supposed and I
spent a considerable large amount of time in finding the bug. It was a
very simple problem with symbols where I mixed something up.</p>

<p>In the application the web server somewhen gets some JSON data from
the browser. It is then converted to Lisp object using the <code>CL-JSON</code>
package. This package converts JSON objects to a-lists and converts
the member keys to symbols (see CL-JSON&rsquo;s <a href="http://common-lisp.net/project/cl-json/">documentation</a>. I then wanted to look something up in that a-list and failed.</p>

<p>I wrote a small test case to show the effect and explain what went wrong.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(ql:quickload '("hunchentoot" "cl-who"))
</span><span class='line'>;; direct loading via ql only for demonstration purposes, normally I
</span><span class='line'>;; would use a asdf:defsystem for that.
</span><span class='line'>
</span><span class='line'>(in-package :cl-user)
</span><span class='line'>
</span><span class='line'>(defpackage :my-app (:use :cl))
</span><span class='line'>
</span><span class='line'>(in-package :my-app)
</span><span class='line'>
</span><span class='line'>(defparameter *my-a-list* 
</span><span class='line'>  '((foo . 100)
</span><span class='line'>    (bar . 200)))   ;; in the real application this a-list is
</span><span class='line'>          ;; generated by a JSON-to-lisp conversion by
</span><span class='line'>          ;; CL-JSON; in CL-JSON the object member keys are
</span><span class='line'>          ;; converted to symbols.
</span><span class='line'>
</span><span class='line'>(defun get-value (key)
</span><span class='line'>  "Returns the value with KEY from *MY-A-LIST*."
</span><span class='line'>  (cdr (assoc (intern (string-upcase key)) *my-a-list*)))
</span><span class='line'>
</span><span class='line'>(hunchentoot:define-easy-handler (web-get-value :uri "/get-value") (id)
</span><span class='line'>  (cl-who:with-html-output-to-string (*standard-output* nil :prologue t)
</span><span class='line'>    (:p (cl-who:fmt "Value of ~a is: ~a" id (get-value id)))))
</span><span class='line'>
</span><span class='line'>(defun start ()
</span><span class='line'>  (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 4242)))</span></code></pre></td></tr></table></div></figure>


<p>So on the REPL everything looks fine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MY-APP&gt; (get-value "foo")
</span><span class='line'>100
</span><span class='line'>MY-APP&gt; (get-value "bar")
</span><span class='line'>200
</span><span class='line'>MY-APP&gt; </span></code></pre></td></tr></table></div></figure>


<p>But when I used my web browser to give me these results as well I got something strange.
For example here are some results when using curl:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~&gt; curl http://localhost:4242/get-value?id=foo
</span><span class='line'>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
</span><span class='line'>&lt;p&gt;Value of foo is: NIL&lt;/p&gt;</span></code></pre></td></tr></table></div></figure>


<p>I was puzzled: The value is <code>NIL</code>?</p>

<p>After some debugging I found out that the easy handler from
Hunchentoot runs with <code>*package*</code> set to <code>COMMON-LISP-USER</code>
(and not to <code>MY-APP</code> as I implicitly assumed). That means that <code>assoc</code> looked up <code>COMMON-LISP-USER::FOO</code> in the a-list where
the keys are <code>MY-APP::FOO</code> and <code>MY-APP::BAR</code>.
And this test fails. Therefore <code>NIL</code> is returned which is correct.</p>

<p>So I rewrote the <code>get-value</code> function to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun get-value (key)
</span><span class='line'>  "Returns the value with KEY from *MY-A-LIST*."
</span><span class='line'>  (cdr (assoc (intern (string-upcase key)
</span><span class='line'>            (find-package :my-app)) *my-a-list*)))</span></code></pre></td></tr></table></div></figure>


<p>Now the symbols are interned in the same package and everything went well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~&gt; curl http://localhost:4242/get-value?id=foo
</span><span class='line'>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
</span><span class='line'>&lt;p&gt;Value of foo ist: 100&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>~&gt; curl http://localhost:4242/get-value?id=bar
</span><span class='line'>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
</span><span class='line'>&lt;p&gt;Value of bar ist: 200&lt;/p&gt;</span></code></pre></td></tr></table></div></figure>


<p>Therefore I was reminded to think about packages when interning
 symbols. A good guide to symbols and packages could be found in this
 document: <a href="http://www.flownet.com/gat/packages.pdf">The Complete Idiot&rsquo;s Guide to Common Lisp Packages</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode support for Octopress]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/06/10/unicode-support-for-octopress/"/>
    <updated>2014-06-10T09:26:22+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/06/10/unicode-support-for-octopress</id>
    <content type="html"><![CDATA[<p>Well, it seems Octopress/Jekyll would like to have a locale set
for UTF-8 support. I followed <a href="http://www.dominik-gaetjens.de/blog/2012/06/09/utf-8-in-octopress/">this (text in German)</a> hint and now my Dockerfile looks
like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># dockerfile for octopress
</span><span class='line'>
</span><span class='line'>FROM ubuntu:14.04
</span><span class='line'>MAINTAINER krrrcks &lt;krrrcks@krrrcks.net&gt;
</span><span class='line'>ENV DEBIAN_FRONTEND noninteractive
</span><span class='line'>
</span><span class='line'>RUN apt-get update; \
</span><span class='line'>  apt-get -q -y upgrade
</span><span class='line'>RUN /usr/sbin/locale-gen en_US.UTF-8; \
</span><span class='line'>  update-locale LANG=en_US.UTF-8
</span><span class='line'>RUN apt-get -q -y install git curl; \
</span><span class='line'>  apt-get clean
</span><span class='line'>RUN git clone git://github.com/imathis/octopress.git /opt/octopress
</span><span class='line'>RUN curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>ENV HOME /root
</span><span class='line'>RUN echo "export LC_ALL=en_US.UTF-8" &gt;&gt; /root/.bashrc
</span><span class='line'>RUN echo "export LANG=en_US.UTF-8" &gt;&gt; /root/.bashrc
</span><span class='line'>RUN echo "source /usr/local/rvm/scripts/rvm" &gt;&gt; /root/.bashrc; 
</span><span class='line'>RUN /bin/bash -l -c "source /usr/local/rvm/scripts/rvm; \
</span><span class='line'>  rvm install 1.9.3; \
</span><span class='line'>  rvm use 1.9.3; \
</span><span class='line'>  rvm rubygems latest; \
</span><span class='line'>  cd /opt/octopress; \
</span><span class='line'>  gem install bundler; \
</span><span class='line'>  bundle install; \
</span><span class='line'>  rake install" 
</span><span class='line'>RUN echo "rvm use 1.9.3" &gt;&gt; /root/.bashrc
</span><span class='line'>
</span><span class='line'>WORKDIR /opt/octopress
</span><span class='line'>EXPOSE 4000
</span><span class='line'>CMD ["/bin/bash"] </span></code></pre></td></tr></table></div></figure>


<p>After playing around with Docker and Octopress I put the whole <code>/opt/octopress</code> folder on my host machine and then
restarted the image with the <code>-v</code> flag. Therefore I can edit the files on my host machine with my favorite editor
and use the container only for producing the HTML files, for preview and for publishing.</p>

<p>The <code>rake preview</code> is a neat feature because the server always looks for changed files and produces the HTML
files on the fly. That means I can edit the files in my editor and could see the resulting pages in a
browser nearly the same time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Dockerfile for setting up Octopress]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/05/26/my-dockerfile-for-setting-up-octopress/"/>
    <updated>2014-05-26T09:24:00+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/05/26/my-dockerfile-for-setting-up-octopress</id>
    <content type="html"><![CDATA[<p>After my trouble with installing all the dependencies for Octopress I
came up with the following Dockerfile for Docker. This follows the
instructions from the Octopress homepage and uses RVM for managing the
ruby dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># dockerfile for octopress
</span><span class='line'>
</span><span class='line'>FROM ubuntu:14.04
</span><span class='line'>MAINTAINER krrrcks &lt;krrrcks@krrrcks.net&gt;
</span><span class='line'>ENV DEBIAN_FRONTEND noninteractive
</span><span class='line'>
</span><span class='line'>RUN apt-get update; \
</span><span class='line'>  apt-get -q -y upgrade
</span><span class='line'>RUN apt-get -q -y install git curl; \
</span><span class='line'>  apt-get clean
</span><span class='line'>RUN git clone git://github.com/imathis/octopress.git /opt/octopress
</span><span class='line'>RUN curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>ENV HOME /root
</span><span class='line'>RUN echo "source /usr/local/rvm/scripts/rvm" &gt;&gt; /root/.bashrc; 
</span><span class='line'>RUN /bin/bash -l -c "source /usr/local/rvm/scripts/rvm; \
</span><span class='line'>  rvm install 1.9.3; \
</span><span class='line'>  rvm use 1.9.3; \
</span><span class='line'>  rvm rubygems latest; \
</span><span class='line'>  cd /opt/octopress; \
</span><span class='line'>  gem install bundler; \
</span><span class='line'>  bundle install; \
</span><span class='line'>  rake install" 
</span><span class='line'>RUN echo "rvm use 1.9.3" &gt;&gt; /root/.bashrc
</span><span class='line'>
</span><span class='line'>WORKDIR /opt/octopress
</span><span class='line'>EXPOSE 4000
</span><span class='line'>CMD ["/bin/bash"] </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First post]]></title>
    <link href="http://blog.krrrcks.net/blog/2014/05/24/first-post/"/>
    <updated>2014-05-24T18:13:02+00:00</updated>
    <id>http://blog.krrrcks.net/blog/2014/05/24/first-post</id>
    <content type="html"><![CDATA[<p>This is my first blog post. I try to use Octopress for it. Let&rsquo;s see if this works somehow.</p>
]]></content>
  </entry>
  
</feed>
